diff -ur sources/deeptree-nested/config-overrides.js sources/deeptree-nested-rrh/config-overrides.js
--- sources/deeptree-nested/config-overrides.js	2019-03-27 20:38:57.000000000 +0900
+++ sources/deeptree-nested-rrh/config-overrides.js	2019-03-28 17:43:58.000000000 +0900
@@ -7,7 +7,6 @@
       react: "React",
       redux: "Redux",
       "react-dom": "ReactDOM",
-      "react-redux": "ReactRedux"
     };
   }
 
diff -ur sources/deeptree-nested/package.json sources/deeptree-nested-rrh/package.json
--- sources/deeptree-nested/package.json	2019-03-27 20:38:57.000000000 +0900
+++ sources/deeptree-nested-rrh/package.json	2019-03-28 17:44:51.000000000 +0900
@@ -7,9 +7,9 @@
     "fps-emit": "file:../../fps-emit",
     "react": "^16.6.0",
     "react-dom": "^16.6.0",
-    "react-redux": "^5.1.0",
     "react-scripts": "2.0.3",
     "redux": "^4.0.0",
+    "redux-react-hook": "^3.2.1",
     "redux-starter-kit": "^0.4.3",
     "reselect": "^3.0.1"
   },
diff -ur sources/deeptree-nested/public/index.html sources/deeptree-nested-rrh/public/index.html
--- sources/deeptree-nested/public/index.html	2019-03-27 20:38:57.000000000 +0900
+++ sources/deeptree-nested-rrh/public/index.html	2019-03-28 17:45:09.000000000 +0900
@@ -44,6 +44,5 @@
     <script type="text/javascript" src="redux.min.js"></script>
     <script type="text/javascript" src="react.production.min.js"></script>
     <script type="text/javascript" src="react-dom.production.min.js"></script>
-    <script type="text/javascript" src="react-redux.min.js"></script>
   </body>
 </html>
diff -ur sources/deeptree-nested/src/App.js sources/deeptree-nested-rrh/src/App.js
--- sources/deeptree-nested/src/App.js	2019-03-27 20:38:57.000000000 +0900
+++ sources/deeptree-nested-rrh/src/App.js	2019-03-28 18:58:45.000000000 +0900
@@ -1,5 +1,5 @@
 import React from "react";
-import { connect } from "react-redux";
+import { useDispatch, useMappedState } from "redux-react-hook";
 
 import Slice from "./Slice";
 import * as c from "./constants";
@@ -23,57 +23,53 @@
   return incrementMany({ mod });
 }
 
-const mapDispatch = {
-  incrementRandomCounter,
-  incrementFifth: () => doUpdateMany(5),
-  incrementThird: () => doUpdateMany(3),
-  appendRandomCharacter,
-  appendMany: () => appendRandomCharToMany(4)
-};
-
-class App extends React.Component {
-  render() {
-    return (
+const App = () => {
+  const { slice } = useMappedState(mapState);
+  const dispatch = useDispatch();
+  const props = {
+    incrementRandomCounter: () => dispatch(incrementRandomCounter()),
+    incrementFifth: () => dispatch(doUpdateMany(5)),
+    incrementThird: () => dispatch(doUpdateMany(3)),
+    appendRandomCharacter: () => dispatch(appendRandomCharacter()),
+    appendMany: () => dispatch(appendRandomCharToMany(4)),
+  };
+  return (
+    <div>
       <div>
-        <div>
-          <button
-            id="incrementRandom"
-            onClick={this.props.incrementRandomCounter}
-          >
-            Update Random Counter
-          </button>
-          <button id="incrementFifth" onClick={this.props.incrementFifth}>
-            Update 1/5 Counters
-          </button>
-          <button id="incrementThird" onClick={this.props.incrementThird}>
-            Update 1/3 Counters
-          </button>
-          <button
-            id="appendRandomCharacter"
-            onClick={this.props.appendRandomCharacter}
-          >
-            Append Random Char
-          </button>
-          <button id="appendMany" onClick={this.props.appendMany}>
-            Append Char to Many
-          </button>
-        </div>
-        <div className="row">
-          {this.props.slices.map((slice, idx) => {
-            return (
-              <div style={{ display: "inline-block", minWidth: 70 }} key={idx}>
-                <Slice idx={slice} remainingDepth={c.TREE_DEPTH} />
-              </div>
-            );
-          })}
-        </div>
+        <button
+          id="incrementRandom"
+          onClick={props.incrementRandomCounter}
+        >
+          Update Random Counter
+        </button>
+        <button id="incrementFifth" onClick={props.incrementFifth}>
+          Update 1/5 Counters
+        </button>
+        <button id="incrementThird" onClick={props.incrementThird}>
+          Update 1/3 Counters
+        </button>
+        <button
+          id="appendRandomCharacter"
+          onClick={props.appendRandomCharacter}
+        >
+          Append Random Char
+        </button>
+        <button id="appendMany" onClick={props.appendMany}>
+          Append Char to Many
+        </button>
       </div>
-    );
-  }
-}
+      <div className="row">
+        {slices.map((slice, idx) => {
+          return (
+            <div style={{ display: "inline-block", minWidth: 70 }} key={idx}>
+              <Slice idx={slice} remainingDepth={c.TREE_DEPTH} />
+            </div>
+          );
+        })}
+      </div>
+    </div>
+  );
+};
 App.displayName = "App";
 
-export default connect(
-  mapState,
-  mapDispatch
-)(App);
+export default App;
diff -ur sources/deeptree-nested/src/Slice.jsx sources/deeptree-nested-rrh/src/Slice.jsx
--- sources/deeptree-nested/src/Slice.jsx	2019-03-27 20:38:57.000000000 +0900
+++ sources/deeptree-nested-rrh/src/Slice.jsx	2019-03-28 18:58:36.000000000 +0900
@@ -1,94 +1,66 @@
-import React, { Component } from "react";
-import { connect } from "react-redux";
+import React, { useCallback, useEffect } from "react";
+import { useDispatch, useMappedState } from "redux-react-hook";
 
 import { initialize, createStringId } from "./strings";
 import { TEXT_INPUT_MOD } from "./constants";
 
-const counterMapState = (state, props) => {
-  return {
-    value: state.counters[props.idx]
-  };
-};
-
-const Counter = ({ value }) => {
+const Counter = ({ idx }) => {
+  const mapState = useCallback(state => state.counters[idx], [idx]);
+  const value = useMappedState(mapState);
   return <div>Value: {value}</div>;
 };
 
 Counter.displayName = "Counter";
 
-const ConnectedCounter = connect(counterMapState)(Counter);
-
-const textMapState = (state, ownProps) => {
-  const stringId = createStringId(ownProps.idx, ownProps.inputId); //`${ownProps.idx}-${ownProps.remainingDepth}`;
-  const text = state.strings[stringId] || "unknown";
-
-  return { text, stringId };
+const TextDisplay = ({ idx, inputId, children }) => {
+  const mapState = useCallback(state => {
+    const stringId = createStringId(idx, inputId); //`${idx}-${remainingDepth}`;
+    const text = state.strings[stringId] || "unknown";
+    return { text, stringId };
+  }, [idx, inputId]);
+  const { text, stringId } = useMappedState(mapState);
+  const dispatch = useDispatch();
+  useEffect(() => {
+    dispatch(initialize({ stringId }));
+  }, []);
+
+  return (
+    <div>
+      Text {stringId}:<br />
+      <textarea value={text} />
+      {children}
+    </div>
+  );
 };
+TextDisplay.displayName = "TextDisplay";
 
-const textMapDispatch = { initialize };
-
-class TextDisplay extends Component {
-  componentDidMount() {
-    const { stringId } = this.props;
-    this.props.initialize({ stringId });
-  }
-
-  render() {
-    const { text, stringId, children } = this.props;
-
-    return (
+const Slice = ({ remainingDepth, idx }) => {
+  if (remainingDepth > 0) {
+    let renderedChild = (
       <div>
-        Text {stringId}:<br />
-        <textarea value={text} />
-        {children}
+        {idx}.{remainingDepth}
+        <div>
+          <Slice idx={idx} remainingDepth={remainingDepth - 1} />
+        </div>
       </div>
     );
-  }
-}
-TextDisplay.displayName = "TextDisplay";
-
-const ConnectedTextDisplay = connect(
-  textMapState,
-  textMapDispatch
-)(TextDisplay);
-
-class Slice extends Component {
-  state = {};
-
-  componentDidMount = () => {
-    //this.props.fillPairs(this.props.idx);
-  };
 
-  render() {
-    const { remainingDepth, idx } = this.props;
-
-    if (remainingDepth > 0) {
-      let renderedChild = (
-        <div>
-          {idx}.{remainingDepth}
-          <div>
-            <Slice idx={idx} remainingDepth={remainingDepth - 1} />
-          </div>
-        </div>
+    if (remainingDepth % TEXT_INPUT_MOD === 0) {
+      renderedChild = (
+        <TextDisplay
+          idx={idx}
+          inputId={remainingDepth / TEXT_INPUT_MOD}
+        >
+          {renderedChild}
+        </TextDisplay>
       );
-
-      if (remainingDepth % TEXT_INPUT_MOD === 0) {
-        renderedChild = (
-          <ConnectedTextDisplay
-            idx={idx}
-            inputId={remainingDepth / TEXT_INPUT_MOD}
-          >
-            {renderedChild}
-          </ConnectedTextDisplay>
-        );
-      }
-
-      return renderedChild;
     }
 
-    return <ConnectedCounter idx={idx} />;
+    return renderedChild;
   }
-}
+
+  return <Counter idx={idx} />;
+};
 Slice.displayName = "Slice";
 
 export default Slice;
diff -ur sources/deeptree-nested/src/index.js sources/deeptree-nested-rrh/src/index.js
--- sources/deeptree-nested/src/index.js	2019-03-27 20:38:57.000000000 +0900
+++ sources/deeptree-nested-rrh/src/index.js	2019-03-28 17:46:05.000000000 +0900
@@ -7,7 +7,7 @@
 import * as c from "./constants";
 import { initialize, incrementRandomCounter, incrementMany } from "./counters";
 
-import { Provider } from "react-redux";
+import { StoreContext } from "redux-react-hook";
 
 import configureStore from "./configureStore";
 
@@ -43,9 +43,9 @@
 
 ReactDOM.render(
   <Profiler id="appProfiler" onRender={onAppRendered}>
-    <Provider store={store}>
+    <StoreContext.Provider value={store}>
       <App />
-    </Provider>
+    </StoreContext.Provider>
   </Profiler>,
   document.getElementById("root")
 );
